package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/sop/auth"
	errs "git.las.iastate.edu/SeniorDesignComS/2023spr/sop/errors"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/sop/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, firstname string, lastname string, email string, password string, admin bool) (*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, errs.NewUnauthorizedError(ctx, "You must be logged in to create user accounts.")
	}

	if !auth.IsAdmin(authUser) {
		return nil, errs.NewForbiddenError(ctx, "You do not have permission to create new user accounts.")
	}

	id, err := r.UserService.CreateUser(ctx, firstname, lastname, email, password, admin)
	if err != nil {
		return nil, err
	}

	return r.Query().User(ctx, *id)
}

// ChangeUserRole is the resolver for the changeUserRole field.
func (r *mutationResolver) ChangeUserRole(ctx context.Context, userID string, admin bool) (*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, errs.NewUnauthorizedError(ctx, "You must be logged in to change user role.")
	}

	if !auth.IsAdmin(authUser) {
		return nil, errs.NewForbiddenError(ctx, "You do not have permission to change other users' roles.")
	}

	err := r.UserService.ChangeUserRole(ctx, userID, admin)
	if err != nil {
		return nil, err
	}

	return r.Query().User(ctx, userID)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, firstname string, lastname string, email string) (*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, errs.NewUnauthorizedError(ctx, "You must be logged in to update user account's.")
	}

	if userID != authUser.ID && !auth.IsAdmin(authUser) {
		return nil, errs.NewForbiddenError(ctx, "You do not have permission to change other user account's.")
	}

	err := r.UserService.UpdateUser(ctx, userID, firstname, lastname, email)
	if err != nil {
		return nil, err
	}

	return r.Query().User(ctx, userID)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return false, errs.NewUnauthorizedError(ctx, "You must login to delete a user account.")
	}

	// User is attempting to delete themselves or Dr. Stone
	if authUser.ID == userID || userID == "73128efa-63a4-4855-867d-8ff855176fd5" {
		return false, errs.NewInputError(ctx, "Cannot delete user account.")
	}

	if !auth.IsAdmin(authUser) {
		return false, errs.NewForbiddenError(ctx, "You do not have permission to delete other users' accounts.")
	}

	err := r.UserService.DeleteUser(ctx, userID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, userID string, newPassword string) (bool, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return false, errs.NewUnauthorizedError(ctx, "You must login to change your password.")
	}

	if authUser.ID != userID && !auth.IsAdmin(authUser) {
		return false, errs.NewForbiddenError(ctx, "You do not have permission to change other users' passwords.")
	}

	err := r.UserService.ChangeUserPassword(ctx, userID, newPassword)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, nil
	}

	user, err := r.UserService.GetUserById(ctx, authUser.ID)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// All is the resolver for the all field.
func (r *queryResolver) All(ctx context.Context) ([]*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, nil
	}

	users, err := r.UserService.GetAllUsers(ctx)
	if err != nil {
		return nil, err
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	authUser := auth.GetUserFromContext(ctx)
	if authUser == nil {
		return nil, nil
	}

	user, err := r.UserService.GetUserById(ctx, userID)
	if err != nil {
		return nil, err
	}

	return user, nil
}
